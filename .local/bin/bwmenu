#!/bin/bash
# Rofi extension for BitWarden-cli
# by https://github.com/mattydebie/bitwarden-rofi
NAME="$(basename "$0")"
VERSION="0.1"
DEFAULT_CLEAR=5
ROFI_FLAGS="-theme $XDG_CONFIG_HOME/rofi/themes/merged.rasi"
ROFI="rofi $ROFI_FLAGS"

# Options
CLEAR=$DEFAULT_CLEAR # Clear password after N seconds (0 to disable)
SHOW_PASSWORD=no # Show part of the password in the notification
BW_HASH_FILE=$BWHASH_FILE

# Holds the available items in memory
ITEMS=

# Stores which command will be used to deal with clipboards
CLIPBOARD_MODE=

# source the hash file to gain access to the BitWarden CLI
# Pre fetch all the items
load_items() {
  # shellcheck disable=SC1090
  source "$BW_HASH_FILE"
  if ! ITEMS=$(bw list items 2>/dev/null); then
    mpw=$($ROFI -dmenu -p "Master Password" -password) || exit $?
    bw unlock "$mpw" | grep -e 'export.*=="' -o > $BW_HASH_FILE || {
      exit_error 1 "Failed to unlock BitWarden.
Please try again."
    }
    load_items
  fi
}

exit_error() {
  local code="$1"
  local message="$2"

  $ROFI -e "$message"
  exit "$code"
}

# Show the Rofi menu with options
# Reads items from stdin
rofi_menu() {
  $ROFI -dmenu -p 'Name' \
    -i -no-custom \
    -mesg ' <b>Alt+r</b>: sync | <b>Alt+u</b>: urls | <b>Alt+n</b>: names | <b>Alt+c</b>: folders' \
    -kb-custom-1 alt+r \
    -kb-custom-2 alt+n \
    -kb-custom-3 alt+u \
    -kb-custom-4 alt+c

}

# Show items in a rofi menu by name of the item
show_items() {
  if item=$(
    echo "$ITEMS" \
    | jq -r ".[] | select( has( \"login\" ) ) | .name" \
    | rofi_menu
  ); then
    item=$(echo "$ITEMS" | jq -r ".[] | select(.name == \"$item\")")
    copy_password "$item"
  else
    on_rofi_exit $?
  fi
}

# Show items in a rofi menu by url of the item
# if url occurs in multiple items, show the menu again with those items only
show_urls() {
  if url=$(
    echo "$ITEMS" \
    | jq -r '.[] | select(has("login")) | .login | select(has("uris")).uris | .[].uri' \
    | rofi_menu
  ); then
    ITEMS=$(bw list items --url "$url")
    if [[ $(echo "$ITEMS" | jq -r 'length') -gt 1 ]]; then
      show_items
    else
      item=$(echo "$ITEMS" | jq -r '.[0]')
      copy_password "$item"
    fi
  else
    on_rofi_exit $?
  fi
}

show_folders() {
  folders=$(bw list folders)
  if ! folder=$(echo "$folders" | jq -r '.[] | .name' | rofi_menu); then
    on_rofi_exit $?
  fi

  folder_id=$(echo "$folders" | jq -r ".[] | select(.name == \"$folder\").id")

  ITEMS=$(bw list items --folderid "$folder_id")
  show_items
}

# re-sync the BitWarden items with the server
sync_bitwarden() {
  bw sync &>/dev/null || exit_error 1 "Failed to sync bitwarden"

  load_items
  show_items
}

# Evaluate the rofi exit codes
on_rofi_exit() {
  case "$1" in
    10) sync_bitwarden;;
    11) load_items; show_items;;
    12) show_urls;;
    13) show_folders;;
    *) exit "$1";;
  esac
}

# Set $CLIPBOARD_MODE to a command that will put stdin into the clipboard.
select_copy_command() {
  if hash xclip 2>/dev/null; then
    CLIPBOARD_MODE=xclip
  elif hash xsel 2>/dev/null; then
    CLIPBOARD_MODE=xsel
  else
    exit_error 1 "No clipboard command found. Please install either xclip or xsel."
  fi
}

clipboard-set() {
  clipboard-${CLIPBOARD_MODE}-set
}

clipboard-get() {
  clipboard-${CLIPBOARD_MODE}-get
}

clipboard-clear() {
  clipboard-${CLIPBOARD_MODE}-clear
}

clipboard-xclip-set() {
    xclip -selection clipboard -r
}

clipboard-xclip-get() {
    xclip -selection clipboard -o
}

clipboard-xclip-clear() {
    echo -n "" | xclip -selection clipboard -r
}

clipboard-xsel-set() {
  xsel --clipboard --input
}

clipboard-xsel-get() {
  xsel --clipboard
}

clipboard-xsel-clear() {
  xsel --clipboard --delete
}

# Copy the password
# copy to clipboard and give the user feedback that the password is copied
# $1: json item
copy_password() {
  pass=$(echo "$1" | jq -r '.login.password')

  show_copy_notification "$1"
  echo -n "$pass" | clipboard-set

  if [[ $CLEAR -gt 0 ]]; then
    sleep "$CLEAR"
    if [[ "$(clipboard-get)" == "$pass" ]]; then
      clipboard-clear
    fi
  fi
}

# Show notification about the password being copied.
# $1: json item
show_copy_notification() {
  local title
  local body=""
  local extra_options=()

  title="<b>$(echo "$1" | jq -r '.name')</b> copied"

  if [[ $SHOW_PASSWORD == "yes" ]]; then
    pass=$(echo "$1" | jq -r '.login.password')
    body="${pass:0:4}****"
  fi

  if [[ $CLEAR -gt 0 ]]; then
    body="$body<br>Will be cleared in ${CLEAR} seconds."
    # Keep notification visible while the clipboard contents are active.
    extra_options+=("-t" "$((CLEAR * 1000))")
  fi
  # not sure if icon will be present everywhere, /usr/share/icons is default icon location
  notify-send "$title" "$body" "${extra_options[@]}" -i /usr/share/icons/hicolor/64x64/apps/bitwarden.png
}

parse_cli_arguments() {
  # Use GNU getopt to parse command line arguments
  if ! ARGUMENTS=$(getopt -o c:C --long clear:,no-clear,show-password,state-path:,help,version -- "$@"); then
    exit_error 1 "Failed to parse command-line arguments"
  fi
  eval set -- "$ARGUMENTS"

  while true; do
    case "$1" in
      --help )
        cat <<-USAGE
$NAME $VERSION

Usage:
  $NAME [options]

Options:
  --help
      Show this help text and exit.

  --version
      Show version information and exit.

  -c <SECONDS>, --clear <SECONDS>, --clear=<SECONDS>
      Clear password from clipboard after this many seconds.
      Defaults: ${DEFAULT_CLEAR} seconds.

  -C, --no-clear
      Don't automatically clear the password from the clipboard. This disables
      the default --clear option.

  --show-password
      Show the first 4 characters of the copied password in the notification.

  --state-path <PATH>, --state-path=<PATH>
      Store the Bitwarden session information in this file. This file makes it
      possible to reuse your session multiple times and keep you from having to
      enter your master password over and over again.
      Default: "${BW_HASH_FILE}".

      NOTE: The "~" character will not be expanded properly unless you put a
      space between the argument and the value.

Examples:
  # Default options work well
  $NAME

  # Tilde can be used when you put space in arguments.
  $NAME -c 10 --state-path ~/.cache/bwmenu
  $NAME -c 10 --state-path=$HOME/.cache/bwmenu

  # XDG-compatible state location
  $NAME --state-path=\${XDG_RUNTIME_DIR}/bwmenu-state
USAGE
        shift
        exit 0
        ;;
      --version )
        echo "$NAME $VERSION"
        shift
        exit 0
        ;;
      -c | --clear )
        CLEAR="$2"
        shift 2
        ;;
      -C | --no-clear )
        CLEAR=0
        shift
        ;;
      --show-password )
        SHOW_PASSWORD=yes
        shift
        ;;
      --state-path )
        BW_HASH_FILE="$2"
        shift 2
        ;;
      -- )
        break
        ;;
      * )
        exit_error 1 "Unknown option $1"
    esac
  done
}

init_state() {
  if ! [[ -f "$BW_HASH_FILE" ]]; then
    touch "$BW_HASH_FILE"
    chmod 600 "$BW_HASH_FILE"
  fi
}

parse_cli_arguments "$@"
init_state
select_copy_command
load_items
show_items
